// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 	1 if (out < 0),  0 otherwise

    PARTS:
    
    // Get the actual X and actual Y after taking into account zx, nx, zy, ny
    Not16(in=x,out=notX);
    Mux4Way16(a=x,b=notX,c=false,d=true,sel[0]=nx,sel[1]=zx,out=actualX);
    Not16(in=y,out=notY);
    Mux4Way16(a=y,b=notY,c=false,d=true,sel[0]=ny,sel[1]=zy,out=actualY);
    
    // Get the result of AND (or SUM) depending on f
    Add16(a=actualX,b=actualY,out=sum);
    And16(a=actualX,b=actualY,out=and);
    Mux16(a=and,b=sum,sel=f,out=unnegatedOut);
    
    // Decide between the unnegated version and the negated version of out;
    // Extract the MSB as ng;
    // and prepare internal bus for the zr computation
    Not16(in=unnegatedOut,out=negatedOut);
    Mux16(a=unnegatedOut,b=negatedOut,sel=no,out=out,out[0..7]=actualOut1,out[8..15]=actualOut2,out[15]=ng);
    
    
    // Compute zr; lack of Or16Way means we can use two 8-ways
    Or8Way(in=actualOut1,out=anyOnes1);
    Or8Way(in=actualOut2,out=anyOnes2);
    //the output is zero iff both anyOnes1 and anyOnes2 are 0
    Or(a=anyOnes1,b=anyOnes2,out=anyOnes);
    Not(in=anyOnes,out=zr);
    
}
