// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. 
 
 The addressM and pc outputs are clocked: although they 
 // (MC's note: can feed addressM and pc into the inputs)
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution;  111a cccc ccdd djjj for C-instruction, 0vvv vvvv vvvv vvvv for A-instruction
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output //i.e., the result of the computation
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    ///////////////////////////////////////////////////////////////////////////

    
    ///////////////////////////////////////////////////////////////////
    //Writing to D:
    //we put the computation result into D if
    //this is a C-instruction and if d2 (=instruction[4]) is true
    And(a=instruction[15],b=instruction[4],out=loadNewD);
    Register(in=aluOut, load=loadNewD, out=D);
    //////////////////////////////////////////////////////////////////////
    
    
    ////////////////////////////////////////////////////////////////////////
    //Writing to A: 
    //If the instruction is an A-instruction (i.e. has form 0vvv vvvv vvvv vvvv) then we put the 15-bit value (vv..v) into the 15 least significant bits of A
    //Else, if it is a C-instruction with d1=true, then we store the result in A
    //otherwise, A remains unchanged 
    
    Not(in=instruction[15],out=isAInstruction);
    
    Mux16(a=aluOut, b=instruction, 
    sel=isAInstruction, out=newAValue);
    Or(a=isAInstruction,b=instruction[5],out=loadNewA); //instruction[5]=d1
    
    Register(in=newAValue, load=loadNewA, out[0..14]=addressM, out=A); //XXXXXXXX
    
    ///////////////////////////////////////////////////////////////////////
    
    
    //////////////////////////////////////////////////////////////////////////
    //Whether we are using A or the memory as the 2nd argument
    Mux16(a=A, b=inM, sel=instruction[12], out=AorM); // the "a" in 111a ... determines whether to use A (when a=0) or M (when a=1)
    //110111 = c1c2c3c4c5c6 = i[11]i[10]...i[6]
    //the computation (recall C-instruction is like 111a cccc ccdd djjj)
    ALU(x=D,y=AorM,

    zx=instruction[11],
    nx=instruction[10],
    zy=instruction[9],
    ny=instruction[8],
    f=instruction[7],
    no=instruction[6],
    //bitwise negation of 0 is like -1;
    //bitwise negation of A is like 2^N-(A+1) = -(A+1);
    //Then Addition with -1 is -1-(A+1) = -2-A
    //Then negation of output is A+2 = WRONG HERE! XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
    out=outM,
    out=aluOut,
    zr=i2,
    ng=i1);
    //////////////////////////////////////////
    
    
    
    ///////////////////////////////////////////////////////////
    //WRITING THE RESULT TO MEMORY

    //If C-instruction, and d3=true, then we set writeM=true (this tells the computer to put it into RAM[A]
    And(a=instruction[3],b=instruction[15],out=writeM);

    ///////////////////////////////////////////////////////////

    
    ///////////////////////////////////////////////////////////
    //CHANGING PC///////
    
    //jmp = whether to jump
    //i1,i2,i3 are negative, zero, or positive computation results
    //j1,j2,j3 are instruction[2]instruction[1]instruction[0], are the jump conditions
    Or(a=i1,b=i2,out=i1ori2);
    Not(in=i1ori2,out=i3);
    
    And(a=i1,b=instruction[2],out=jmp1);
    And(a=i2,b=instruction[1],out=jmp2);
    And(a=i3,b=instruction[0],out=jmp3);
    //Jump to A if jmp1 OR jmp2 OR jmp3
    Or(a=jmp1,b=jmp2,out=jmp4);
    Or(a=jmp4,b=jmp3,out=jmp5);
    And(a=jmp5,b=instruction[15],out=jmp); //only jump for C-instruction
    //Reset PC if reset=true; else set it to A if jmp=true; otherwise increment.
    PC(in=A,load=jmp,inc=true,reset=reset,out[0..14]=pc);

    
}
