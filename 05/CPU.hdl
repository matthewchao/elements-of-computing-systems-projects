// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. 
 
 The addressM and pc outputs are clocked: although they 
 // (MC's note: can feed addressM and pc into the inputs)
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution;  111a cccc ccdd djjj for C-instruction
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
    Mux16(a=A,b=M,sel=instruction[3],out=AorM); // the "a" in 111a ... determines whether to use A (when a=0) or M (when a=1)


    ALU(x=D,y=AorM,
    //Observation 1: c1 = "ignore D" (i.e. set it to 0)
    zx=instruction[4],
    //Observation 2: c3 = "ignore AorM"
    zy=instruction[6],
    //Observations 3, 4, 5: c2, c4, c6 = negate the x, negate the y, negate the output respectively
    nx=instruction[5],
    ny=instruction[7],
    no=instruction[9],
    //Observation 6: c5 = "do an addition" (vs an AND)
    f=instruction[8],
    out=outM,
    zr=i2,
    ng=i1);
    

    Or(a=i1,b=i2,out=i1ori2);
    Not(in=i1ori2,out=i3);
    
    //jmp = whether to jump
    //j1,j2,j3 are instruction[13..15]
    And(a=i1,b=instruction[13],out=jmp1);
    And(a=i2,b=instruction[14],out=jmp2);
    And(a=i3,b=instruction[15],out=jmp3);
    //Jump if jmp1 or jmp2 or jmp3
    Or(a=jmp1,b=jmp2,out=jmp4);
    Or(a=jmp4,b=jmp3,out=jmp);

    
    
    //Set PC to A if jmp=true, otherwise increment.
    PC(in=A,load=jmp,inc=true,reset=false,out[0..14]=pc);

    
}
