// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here    

    DMux(in=load,sel=address[14],a=load0,b=load1);
    //address[14]=0 means access the RAM16K
    //address[14]=1 means access the screen or keyboard
    RAM16K(in=in,load=load0,address=address[0..13],out=ramOut);

    // (16K = 2^4*2^10=2^14)
    //1111 1111 1111 110 is the last RAM address? (little-endian)
    //0000 0000 0000 001 (= 2^14) is the first screen address
    // (8K = 2^3*2^10 = 2^13 screen addresses)
    //1111 1111 1111 101 is the last screen address
    //0000 0000 0000 011 is the keyboard address
    //So we can distinguish between screen/keyboard with address[13]
    
    DMux(in=load1,sel=address[13],a=loadScreen);
    Screen(load=loadScreen,in=in,address=address[0..12], out=screenOut);    
    Keyboard(out=keyOut);
    //ioOut equals either screenOut or keyOut
    Mux16(a=screenOut,b=keyOut,sel=address[13],out=ioOut);
    Mux16(a=ramOut,b=ioOut,sel=address[14],out=out);
    
    
}
